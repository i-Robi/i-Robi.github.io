/**
 * @file Animation module.
 * @author SÃ©bastien Robaszkiewicz [hello@robi.me]
 */

'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var Edge = require('./Edge');
var Vertex = require('./Vertex');
var World = require('./World');

var PIXEL_RATIO = (function () {
  var context = document.createElement('canvas').getContext('2d');
  var dPR = window.devicePixelRatio || 1;
  var bPR = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;

  return dPR / bPR;
})();

function distance(vertex1, vertex2) {
  var dx = vertex1.coordinates.x - vertex2.coordinates.x;
  var dy = vertex1.coordinates.y - vertex2.coordinates.y;

  return dx * dx + dy * dy;
}

function getTime() {
  return window.performance && window.performance.now ? window.performance.now() / 1000 : new Date().getTime() / 1000;
}

/**
 * @class Filter
 * @description Calculates the derivative and applies a low-pass filter.
 */

var Filter = (function () {
  function Filter(timeConstant) {
    _classCallCheck(this, Filter);

    this._dX;
    this._dXFiltered;
    this._previousX;
    this._previousDXFiltered;
    this._previousTimestamp;
    this._timeConstant = timeConstant;
  }

  /**
   * @class Animation
   * @extends World
   * @description Calculates and renders the canvas animation.
   */

  _createClass(Filter, [{
    key: '_decay',
    value: function _decay(dt) {
      return Math.exp(-2 * Math.PI * dt / this._timeConstant);
    }
  }, {
    key: 'input',
    value: function input(x) {
      var now = getTime();
      var k = undefined;

      if (this._previousTimestamp && this._previousX) {
        var dt = now - this._previousTimestamp;
        k = this._decay(dt);
        this._dX = (x - this._previousX) / dt;
      }

      this._previousTimestamp = now;
      this._previousX = x;

      if (this._dX) {
        if (this._previousDXFiltered) this._dXFiltered = k * this._previousDXFiltered + (1 - k) * this._dX;else this._dXFiltered = this._dX;

        this._previousDXFiltered = this._dXFiltered;

        return this._dXFiltered;
      }

      return;
    }
  }]);

  return Filter;
})();

var Animation = (function (_World) {
  _inherits(Animation, _World);

  function Animation() {
    _classCallCheck(this, Animation);

    _get(Object.getPrototypeOf(Animation.prototype), 'constructor', this).call(this);

    this._canvas = document.querySelector('#scene');
    this._canvasHeight;
    this._canvasWidth;
    this._edges = [];
    this._elapsedTime = 0;
    this._filter;
    this._vertices = [];
    this._verticesNum;
    this._windowWidth;
    this._windowHeight;

    this.config;
    this.ctx = this._canvas.getContext('2d');

    this._updateCanvasSize = this._updateCanvasSize.bind(this);
  }

  _createClass(Animation, [{
    key: 'render',
    value: function render(dt) {
      this.ctx.clearRect(0, 0, this._canvasWidth, this._canvasHeight);

      for (var i = 0; i < this._vertices.length; i++) {
        this._vertices[i].draw(this.ctx, dt);
      }for (var i = 0; i < this._edges.length; i++) {
        this._edges[i].draw(this.ctx, dt);
      }
    }
  }, {
    key: 'update',
    value: function update(dt) {
      this._edges = [];

      for (var i = 0; i < this._vertices.length; i++) {
        // Update the vertex
        var vertex1 = this._vertices[i];
        this._vertices[i].update(this._elapsedTime, dt, this._canvasWidth, this._canvasHeight);

        // Update the edges array
        for (var j = i; j > 0; j--) {
          var vertex2 = this._vertices[j];
          var dist = distance(vertex1, vertex2);
          var minDistance = this.config.minDistance * this.config.minDistance;

          if (dist < minDistance) {
            var edge = new Edge(vertex1, vertex2, dist, minDistance);
            this._edges.push(edge);
          }
        }
      }

      this._elapsedTime += dt;
    }
  }, {
    key: '_updateCanvasSize',
    value: function _updateCanvasSize() {
      this._windowWidth = parseInt(window.innerWidth, 10);
      this._windowHeight = parseInt(window.innerHeight, 10);
      this._canvasWidth = this._windowWidth * PIXEL_RATIO;
      this._canvasHeight = this._windowHeight * PIXEL_RATIO;

      this._canvas.width = this._canvasWidth;
      this._canvas.height = this._canvasHeight;
      this._canvas.style.width = this._windowWidth + "px";
      this._canvas.style.height = this._windowHeight + "px";
      this._canvas.getContext("2d").setTransform(PIXEL_RATIO, 0, 0, PIXEL_RATIO, 0, 0);

      this._vertices = [];
      this._verticesNum = Math.round(this._canvasWidth * this._canvasHeight * this.config.vertexDensity * 0.00003);

      for (var i = 0; i < this._verticesNum; ++i) {
        this._vertices.push(new Vertex(this.config));
      }
    }
  }, {
    key: 'start',
    value: function start(worldConfig, gameloopConfig) {
      _get(Object.getPrototypeOf(Animation.prototype), 'start', this).call(this, worldConfig, gameloopConfig);

      this._updateCanvasSize();
      this._betaFilter = new Filter(this.config.filterTimeConstant);
      this._gammaFilter = new Filter(this.config.filterTimeConstant);
      window.addEventListener('resize', this._updateCanvasSize);
    }
  }, {
    key: 'onOrientation',
    value: function onOrientation(beta, gamma) {
      var dBetaFiltered = this._betaFilter.input(beta);
      var dGammaFiltered = this._gammaFilter.input(gamma);

      if (dBetaFiltered && dGammaFiltered) {
        for (var i = 0; i < this._vertices.length; i++) {
          this._vertices[i].onOrientation(dBetaFiltered, dGammaFiltered);
        }
      }
    }
  }]);

  return Animation;
})(World);

module.exports = new Animation();
//# sourceMappingURL=data:application/json;base64,