'use strict';

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var Vertex = (function () {
  function Vertex() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Vertex);

    this.canvasMargin = options.canvasMargin || 0;

    this.x = Math.random() * (1 + 2 * this.canvasMargin) - this.canvasMargin; // normalized
    this.y = Math.random() * (1 + 2 * this.canvasMargin) - this.canvasMargin; // normalized
    this.z = Math.random();

    this.minRadius = options.minRadius || 4; // in pixels
    this.radiusVariance = options.radiusVariance || 6; // in pixels
    this.radius = this.radiusVariance * this.z + this.minRadius;

    this.velocityFactor = options.velocityFactor || 20; // pixels per second
    this.vInitX = Math.random() * 2 - 1;
    this.vInitY = Math.random() * 2 - 1;
    this.dBeta = 0;
    this.dGamma = 0;

    this.minFadeinDuration = options.minFadeinDuration || 3;
    this.fadeInDurationVariance = options.fadeInDurationVariance || 2;
    this.fadeInDuration = this.minFadeinDuration + (1 - this.z) * this.fadeInDurationVariance; // in seconds

    this.opacity = 0;

    this.coordinates = {}; // in pixels
  }

  _createClass(Vertex, [{
    key: "update",
    value: function update(elapsedTime, dt, w, h) {
      this.x += this.vx / w * dt;
      this.y += this.vy / h * dt;

      if (this.x > 1 + this.canvasMargin) this.x = -this.canvasMargin;else if (this.x < -this.canvasMargin) this.x = 1 + this.canvasMargin;

      if (this.y > 1 + this.canvasMargin) this.y = -this.canvasMargin;else if (this.y < -this.canvasMargin) this.y = 1 + this.canvasMargin;

      this.coordinates.x = this.x * w;
      this.coordinates.y = this.y * h;

      this.opacity = 0.04 * Math.min(elapsedTime / this.fadeInDuration, 1);
    }
  }, {
    key: "draw",
    value: function draw(ctx, dt) {
      ctx.fillStyle = "rgba(0, 0, 0, " + this.opacity + ")";
      ctx.beginPath();
      ctx.arc(this.coordinates.x, this.coordinates.y, this.radius, 0, Math.PI * 2, false);
      ctx.fill();
    }
  }, {
    key: "onOrientation",
    value: function onOrientation(dBeta, dGamma) {
      this.dBeta = dBeta;
      this.dGamma = dGamma;
    }
  }, {
    key: "vx",
    get: function get() {
      return this.velocityFactor * (this.vInitX + this.dGamma * this.z * 200);
    }
  }, {
    key: "vy",
    get: function get() {
      return this.velocityFactor * (this.vInitY + this.dBeta * this.z * 200);
    }
  }]);

  return Vertex;
})();

module.exports = Vertex;
//# sourceMappingURL=data:application/json;base64,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QUMsQ0FBQztLQUN6RTs7O1NBRUssZUFBRztBQUNQLGFBQU8sSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUEsQUFBQyxDQUFDO0tBQ3hFOzs7U0FqQ0csTUFBTTs7O0FBb0VaLE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDIiwiZmlsZSI6InNyYy9WZXJ0ZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNsYXNzIFZlcnRleCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuY2FudmFzTWFyZ2luID0gb3B0aW9ucy5jYW52YXNNYXJnaW4gfHwgMDtcblxuICAgIHRoaXMueCA9IE1hdGgucmFuZG9tKCkgKiAoMSArIDIgKiB0aGlzLmNhbnZhc01hcmdpbikgLSB0aGlzLmNhbnZhc01hcmdpbjsgLy8gbm9ybWFsaXplZFxuICAgIHRoaXMueSA9IE1hdGgucmFuZG9tKCkgKiAoMSArIDIgKiB0aGlzLmNhbnZhc01hcmdpbikgLSB0aGlzLmNhbnZhc01hcmdpbjsgLy8gbm9ybWFsaXplZFxuICAgIHRoaXMueiA9IE1hdGgucmFuZG9tKCk7XG4gICAgXG4gICAgdGhpcy5taW5SYWRpdXMgPSBvcHRpb25zLm1pblJhZGl1cyB8fCA0OyAvLyBpbiBwaXhlbHNcbiAgICB0aGlzLnJhZGl1c1ZhcmlhbmNlID0gb3B0aW9ucy5yYWRpdXNWYXJpYW5jZSB8fCA2OyAvLyBpbiBwaXhlbHNcbiAgICB0aGlzLnJhZGl1cyA9IHRoaXMucmFkaXVzVmFyaWFuY2UgKiB0aGlzLnogKyB0aGlzLm1pblJhZGl1cztcbiAgICBcbiAgICB0aGlzLnZlbG9jaXR5RmFjdG9yID0gb3B0aW9ucy52ZWxvY2l0eUZhY3RvciB8fCAyMDsgLy8gcGl4ZWxzIHBlciBzZWNvbmRcbiAgICB0aGlzLnZJbml0WCA9IE1hdGgucmFuZG9tKCkgKiAyIC0gMTtcbiAgICB0aGlzLnZJbml0WSA9IE1hdGgucmFuZG9tKCkgKiAyIC0gMTtcbiAgICB0aGlzLmRCZXRhID0gMDtcbiAgICB0aGlzLmRHYW1tYSA9IDA7XG4gICAgXG4gICAgdGhpcy5taW5GYWRlaW5EdXJhdGlvbiA9IG9wdGlvbnMubWluRmFkZWluRHVyYXRpb24gfHwgMztcbiAgICB0aGlzLmZhZGVJbkR1cmF0aW9uVmFyaWFuY2UgPSBvcHRpb25zLmZhZGVJbkR1cmF0aW9uVmFyaWFuY2UgfHwgMjtcbiAgICB0aGlzLmZhZGVJbkR1cmF0aW9uID0gdGhpcy5taW5GYWRlaW5EdXJhdGlvbiArICgxIC0gdGhpcy56KSAqIHRoaXMuZmFkZUluRHVyYXRpb25WYXJpYW5jZTsgLy8gaW4gc2Vjb25kc1xuXG4gICAgdGhpcy5vcGFjaXR5ID0gMDtcblxuICAgIHRoaXMuY29vcmRpbmF0ZXMgPSB7fTsgLy8gaW4gcGl4ZWxzXG4gIH1cblxuICBnZXQgdngoKSB7XG4gICAgcmV0dXJuIHRoaXMudmVsb2NpdHlGYWN0b3IgKiAodGhpcy52SW5pdFggKyB0aGlzLmRHYW1tYSAqIHRoaXMueiAqIDIwMCk7XG4gIH1cblxuICBnZXQgdnkoKSB7XG4gICAgcmV0dXJuIHRoaXMudmVsb2NpdHlGYWN0b3IgKiAodGhpcy52SW5pdFkgKyB0aGlzLmRCZXRhICogdGhpcy56ICogMjAwKTtcbiAgfVxuXG4gIHVwZGF0ZShlbGFwc2VkVGltZSwgZHQsIHcsIGgpIHtcbiAgICB0aGlzLnggKz0gdGhpcy52eCAvIHcgKiBkdDtcbiAgICB0aGlzLnkgKz0gdGhpcy52eSAvIGggKiBkdDtcblxuICAgIGlmICh0aGlzLnggPiAxICsgdGhpcy5jYW52YXNNYXJnaW4pXG4gICAgICB0aGlzLnggPSAtdGhpcy5jYW52YXNNYXJnaW47XG4gICAgZWxzZSBpZiAodGhpcy54IDwgLXRoaXMuY2FudmFzTWFyZ2luKVxuICAgICAgdGhpcy54ID0gMSArIHRoaXMuY2FudmFzTWFyZ2luO1xuXG4gICAgaWYgKHRoaXMueSA+IDEgKyB0aGlzLmNhbnZhc01hcmdpbilcbiAgICAgIHRoaXMueSA9IC10aGlzLmNhbnZhc01hcmdpbjtcbiAgICBlbHNlIGlmICh0aGlzLnkgPCAtdGhpcy5jYW52YXNNYXJnaW4pXG4gICAgICB0aGlzLnkgPSAxICsgdGhpcy5jYW52YXNNYXJnaW47XG5cbiAgICB0aGlzLmNvb3JkaW5hdGVzLnggPSB0aGlzLnggKiB3O1xuICAgIHRoaXMuY29vcmRpbmF0ZXMueSA9IHRoaXMueSAqIGg7XG5cbiAgICB0aGlzLm9wYWNpdHkgPSAwLjA0ICogTWF0aC5taW4oZWxhcHNlZFRpbWUgLyB0aGlzLmZhZGVJbkR1cmF0aW9uLCAxKTtcbiAgfVxuXG4gIGRyYXcoY3R4LCBkdCkge1xuICAgIGN0eC5maWxsU3R5bGUgPSBcInJnYmEoMCwgMCwgMCwgXCIgKyB0aGlzLm9wYWNpdHkgKyBcIilcIjtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmFyYyh0aGlzLmNvb3JkaW5hdGVzLngsIHRoaXMuY29vcmRpbmF0ZXMueSwgdGhpcy5yYWRpdXMsIDAsIE1hdGguUEkgKiAyLCBmYWxzZSk7XG4gICAgY3R4LmZpbGwoKTtcbiAgfVxuXG4gIG9uT3JpZW50YXRpb24oZEJldGEsIGRHYW1tYSkge1xuICAgIHRoaXMuZEJldGEgPSBkQmV0YTtcbiAgICB0aGlzLmRHYW1tYSA9IGRHYW1tYTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZlcnRleDsiXX0=