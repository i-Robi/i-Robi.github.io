// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
// requestAnimationFrame polyfill by Erik MÃ¶ller. fixes from Paul Irish and Tino Zijdel
// MIT license
'use strict';

(function () {
  var lastTime = 0;
  var vendors = ['ms', 'moz', 'webkit', 'o'];
  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
  }

  if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {
    var currTime = new Date().getTime();
    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
    var id = window.setTimeout(function () {
      callback(currTime + timeToCall);
    }, timeToCall);
    lastTime = currTime + timeToCall;
    return id;
  };

  if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {
    clearTimeout(id);
  };
})();

// http://codeincomplete.com/posts/2013/12/4/javascript_game_foundations_the_game_loop/
function timestamp() {
  return window.performance && window.performance.now ? window.performance.now() : new Date().getTime();
}

var loop = {
  run: function run(options) {

    var now;
    var dt = 0;
    var last = timestamp();
    var step = 1 / options.fps;
    var ctx = options.ctx;
    var buffers = options.buffers;
    var update = options.update;
    var render = options.render;
    var gui = options.gui;

    (function (that) {
      function loop() {
        var slow = gui && gui.slow ? gui.slow : 1; // slow motion scaling factor
        var slowStep = slow * step;

        now = timestamp();
        dt = dt + Math.min(1, (now - last) / 1000);

        while (dt > slowStep) {
          dt = dt - slowStep;
          update(step);
        }

        render(ctx, buffers, dt / slow);

        last = now;
        that.rAFid = requestAnimationFrame(loop);
      }

      that.rAFid = requestAnimationFrame(loop);
    })(this);
  },

  quit: function quit() {
    cancelAnimationFrame(this.rAFid);
  }
};

module.exports = exports = loop;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9qcy9sb29wLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUlBLEFBQUMsQ0FBQSxZQUFXO0FBQ1YsTUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLE1BQUksT0FBTyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDM0MsT0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMscUJBQXFCLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDdkUsVUFBTSxDQUFDLHFCQUFxQixHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUMxRSxVQUFNLENBQUMsb0JBQW9CLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBQyxzQkFBc0IsQ0FBQyxJQUN6QyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFDLDZCQUE2QixDQUFDLENBQUM7R0FDaEY7O0FBRUQsTUFBSSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsRUFDL0IsTUFBTSxDQUFDLHFCQUFxQixHQUFHLFVBQVMsUUFBUSxFQUFFLE9BQU8sRUFBRTtBQUN6RCxRQUFJLFFBQVEsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3BDLFFBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDO0FBQ3pELFFBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBVztBQUFFLGNBQVEsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLENBQUM7S0FBRSxFQUN4RSxVQUFVLENBQUMsQ0FBQztBQUNkLFlBQVEsR0FBRyxRQUFRLEdBQUcsVUFBVSxDQUFDO0FBQ2pDLFdBQU8sRUFBRSxDQUFDO0dBQ1gsQ0FBQzs7QUFFSixNQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUM5QixNQUFNLENBQUMsb0JBQW9CLEdBQUcsVUFBUyxFQUFFLEVBQUU7QUFDekMsZ0JBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNsQixDQUFDO0NBQ0wsQ0FBQSxFQUFFLENBQUU7OztBQUdMLFNBQVMsU0FBUyxHQUFHO0FBQ25CLFNBQU8sTUFBTSxDQUFDLFdBQVcsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7Q0FDdkc7O0FBRUQsSUFBSSxJQUFJLEdBQUc7QUFDVCxLQUFHLEVBQUUsYUFBUyxPQUFPLEVBQUU7O0FBRXJCLFFBQUksR0FBRyxDQUFDO0FBQ1IsUUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ1gsUUFBSSxJQUFJLEdBQUcsU0FBUyxFQUFFLENBQUM7QUFDdkIsUUFBSSxJQUFJLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7QUFDM0IsUUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUN0QixRQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLFFBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7QUFDNUIsUUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUM1QixRQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDOztBQUV0QixBQUFDLEtBQUEsVUFBUyxJQUFJLEVBQUU7QUFDZCxlQUFTLElBQUksR0FBRztBQUNkLFlBQUksSUFBSSxHQUFPLEFBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUksR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7QUFDaEQsWUFBSSxRQUFRLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQzs7QUFFM0IsV0FBRyxHQUFHLFNBQVMsRUFBRSxDQUFDO0FBQ2xCLFVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFBLEdBQUksSUFBSSxDQUFDLENBQUM7O0FBRTNDLGVBQU0sRUFBRSxHQUFHLFFBQVEsRUFBRTtBQUNqQixZQUFFLEdBQUcsRUFBRSxHQUFHLFFBQVEsQ0FBQztBQUNuQixnQkFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2hCOztBQUVELGNBQU0sQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLEVBQUUsR0FBQyxJQUFJLENBQUMsQ0FBQzs7QUFFOUIsWUFBSSxHQUFHLEdBQUcsQ0FBQztBQUNYLFlBQUksQ0FBQyxLQUFLLEdBQUcscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7T0FDMUM7O0FBRUQsVUFBSSxDQUFDLEtBQUssR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUMxQyxDQUFBLENBQUMsSUFBSSxDQUFDLENBQUU7R0FDVjs7QUFFRCxNQUFJLEVBQUUsZ0JBQVc7QUFDZix3QkFBb0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDbEM7Q0FDRixDQUFDOztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxHQUFHLElBQUksQ0FBQyIsImZpbGUiOiJzcmMvanMvbG9vcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHA6Ly9wYXVsaXJpc2guY29tLzIwMTEvcmVxdWVzdGFuaW1hdGlvbmZyYW1lLWZvci1zbWFydC1hbmltYXRpbmcvXG4vLyBodHRwOi8vbXkub3BlcmEuY29tL2Vtb2xsZXIvYmxvZy8yMDExLzEyLzIwL3JlcXVlc3RhbmltYXRpb25mcmFtZS1mb3Itc21hcnQtZXItYW5pbWF0aW5nXG4vLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgcG9seWZpbGwgYnkgRXJpayBNw7ZsbGVyLiBmaXhlcyBmcm9tIFBhdWwgSXJpc2ggYW5kIFRpbm8gWmlqZGVsXG4vLyBNSVQgbGljZW5zZVxuKGZ1bmN0aW9uKCkge1xuICB2YXIgbGFzdFRpbWUgPSAwO1xuICB2YXIgdmVuZG9ycyA9IFsnbXMnLCAnbW96JywgJ3dlYmtpdCcsICdvJ107XG4gIGZvcih2YXIgeCA9IDA7IHggPCB2ZW5kb3JzLmxlbmd0aCAmJiAhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTsgKyt4KSB7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2ZW5kb3JzW3hdKydSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdmVuZG9yc1t4XSsnQ2FuY2VsQW5pbWF0aW9uRnJhbWUnXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvd1t2ZW5kb3JzW3hdKydDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgfVxuXG4gIGlmICghd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSlcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oY2FsbGJhY2ssIGVsZW1lbnQpIHtcbiAgICAgIHZhciBjdXJyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgdmFyIHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGxhc3RUaW1lKSk7XG4gICAgICB2YXIgaWQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2soY3VyclRpbWUgKyB0aW1lVG9DYWxsKTsgfSxcbiAgICAgICAgdGltZVRvQ2FsbCk7XG4gICAgICBsYXN0VGltZSA9IGN1cnJUaW1lICsgdGltZVRvQ2FsbDtcbiAgICAgIHJldHVybiBpZDtcbiAgICB9O1xuXG4gIGlmICghd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKVxuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgICBjbGVhclRpbWVvdXQoaWQpO1xuICAgIH07XG59KCkpO1xuXG4vLyBodHRwOi8vY29kZWluY29tcGxldGUuY29tL3Bvc3RzLzIwMTMvMTIvNC9qYXZhc2NyaXB0X2dhbWVfZm91bmRhdGlvbnNfdGhlX2dhbWVfbG9vcC9cbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5wZXJmb3JtYW5jZSAmJiB3aW5kb3cucGVyZm9ybWFuY2Uubm93ID8gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpIDogbmV3IERhdGUoKS5nZXRUaW1lKCk7XG59XG5cbnZhciBsb29wID0ge1xuICBydW46IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblxuICAgIHZhciBub3c7XG4gICAgdmFyIGR0ID0gMDtcbiAgICB2YXIgbGFzdCA9IHRpbWVzdGFtcCgpO1xuICAgIHZhciBzdGVwID0gMSAvIG9wdGlvbnMuZnBzO1xuICAgIHZhciBjdHggPSBvcHRpb25zLmN0eDtcbiAgICB2YXIgYnVmZmVycyA9IG9wdGlvbnMuYnVmZmVycztcbiAgICB2YXIgdXBkYXRlID0gb3B0aW9ucy51cGRhdGU7XG4gICAgdmFyIHJlbmRlciA9IG9wdGlvbnMucmVuZGVyO1xuICAgIHZhciBndWkgPSBvcHRpb25zLmd1aTtcblxuICAgIChmdW5jdGlvbih0aGF0KSB7XG4gICAgICBmdW5jdGlvbiBsb29wKCkge1xuICAgICAgICB2YXIgc2xvdyAgICAgPSAoZ3VpICYmIGd1aS5zbG93KSA/IGd1aS5zbG93IDogMTsgLy8gc2xvdyBtb3Rpb24gc2NhbGluZyBmYWN0b3JcbiAgICAgICAgdmFyIHNsb3dTdGVwID0gc2xvdyAqIHN0ZXA7XG5cbiAgICAgICAgbm93ID0gdGltZXN0YW1wKCk7XG4gICAgICAgIGR0ID0gZHQgKyBNYXRoLm1pbigxLCAobm93IC0gbGFzdCkgLyAxMDAwKTtcblxuICAgICAgICB3aGlsZShkdCA+IHNsb3dTdGVwKSB7XG4gICAgICAgICAgICBkdCA9IGR0IC0gc2xvd1N0ZXA7XG4gICAgICAgICAgICB1cGRhdGUoc3RlcCk7XG4gICAgICAgIH1cblxuICAgICAgICByZW5kZXIoY3R4LCBidWZmZXJzLCBkdC9zbG93KTtcblxuICAgICAgICBsYXN0ID0gbm93O1xuICAgICAgICB0aGF0LnJBRmlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xuICAgICAgfVxuXG4gICAgICB0aGF0LnJBRmlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xuICAgIH0odGhpcykpO1xuICB9LFxuXG4gIHF1aXQ6IGZ1bmN0aW9uKCkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuckFGaWQpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBsb29wO1xuIl19